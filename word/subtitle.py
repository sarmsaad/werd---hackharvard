"""
Parse and manage the Youtube caption

Big warning:
- For now we only work on video that we are sure that it's normally captioned. If we do a video with caption that was
automatically generated by youtube, we get a bunch of weird characters due to how youtube split their stuff. While it
is not going to worry much since we will still get good data out anyway, it's really annoying and create a lot of
junk in our word database.

"""

import logging

import pysrt
import requests
import sys

from db import insert
from youtube import extract_info, extract_playlist

from dictionary import Sentence

l = logging.getLogger(__name__)


class Transcript:
    def __init__(self, video_info):
        """
        :param video_info: The video info dump from youtube_dl
        """

        self.video_info = video_info
        self.video_id = self.video_info["id"]
        self.subtitle = self.parse_caption()

    def parse_caption(self, lang="en"):
        if not self.video_info.get("automatic_captions"):
            # When we don't have the caption
            return

        captions = self.video_info.get("automatic_captions")

        caption_tracks = captions[lang]

        url = None
        subtitle = None

        for track in caption_tracks:
            if track["ext"] == "vtt":
                url = track["url"]
        if url:
            r = requests.get(url)
            if r.status_code == 200:
                subtitle = r.text
        if subtitle:
            s = pysrt.from_string(subtitle)
            self.subtitle = s
        return self.subtitle

    def print_subtitle(self):
        for s in self.subtitle:
            print("{} -> {}: {}".format(s.start, s.end, s.text))

    def analyse(self):
        """
        Put all sentences of the subtitle to our nltk pipeline

        :return:
        """

        for ix, s in enumerate(self.subtitle):
            ss = Sentence(text=s.text, video_id=self.video_id, start=s.start.to_time().isoformat(),
                          end=s.end.to_time().isoformat(), sen_ix=ix)
            ss.store()
            ss.store_words()

    def to_dict(self):
        return [{
            "start": s.start.to_time().isoformat(),
            "end": s.end.to_time().isoformat(),
            "text": s.text,
        } for s in self.subtitle]

    def store_subtitle(self):
        insert(kind="subtitle", data={
            "video_id": self.video_id,
            "video_info": self.video_info,
            "sentences": self.to_dict()
        })


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    args = sys.argv[1:]

    l.debug("Args: %s", args)

    # video_info = extract_info("https://www.youtube.com/watch?v=lekCh_i32iE")
    # tr = Transcript(video_info)
    # tr.print_subtitle()
    # tr.store_subtitle()
    # tr.analyse()

    info = extract_playlist(args[-1])

    for i in info["entries"]:
        tr = Transcript(video_info=i)
        tr.print_subtitle()
        tr.store_subtitle()
        tr.analyse()
